import os
import numpy as np

ROUNDS = 1

IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]

IP_1 = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]

E = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]

SBOX = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]

PC_1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]

PC_2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]

R = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]

def chr_to_bits(c):
    res = bin(ord(c))[2:]
    return map(int, list(res.rjust(8,'0')))

def str_to_bits(s):
    res = []
    for c in s:
        res.extend(chr_to_bits(c)) 
    return res

def bits_to_chr(bits):
    res = int(''.join(map(str, bits)), 2)
    return chr(res)

def bits_to_str(bits):
    res = ''
    for i in range(0, len(bits), 8):
        res += bits_to_chr(bits[i:i+8])
    return res

def xor_bits(l,r):
    res = []
    for i in range(len(l)):
        res.append(l[i]^r[i])
    return res

def F(hblk, subkey):
    bits = [hblk[x-1] for x in E] # 32 -> 48
    bits = xor_bits(bits, subkey) 
    res = []
    for i in range(0, len(bits), 6):   
        row = bits[i]*2+bits[i+5]
        col = bits[i+1]*8+bits[i+2]*4+bits[i+3]*2+bits[i+4]
        val = bin(SBOX[i//6][row][col])[2:]
        res.extend(map(int, list(val.rjust(4,'0'))))
    res = [res[x-1] for x in P]
    return res

# Differential
# bias = []
# for i in range(8):
#     sbox_idx = 7
#     res = np.array([[0]*16]*64)
#     for i in range(64):
         
#         xdiff  = [int(c) for c in bin(i)[2:].rjust(6,'0')]  
#         out = np.array([0]*16)
#         for k in range(64):
#             x = [int(c) for c in bin(k)[2:].rjust(6,'0')]
#             dx = xor_bits(xdiff,x)

#             rowx = x[0]*2+x[5]
#             colx = x[1]*8+x[2]*4+x[3]*2+x[4]
#             y = [int(c) for c in bin(SBOX[sbox_idx][rowx][colx])[2:].rjust(4,'0')]

#             rowdx = dx[0]*2+dx[5]
#             coldx = dx[1]*8+dx[2]*4+dx[3]*2+dx[4]
#             dy = [int(c) for c in bin(SBOX[sbox_idx][rowdx][coldx])[2:].rjust(4,'0')]

#             ydiff = ''.join( list(map(str,xor_bits(y,dy))))

#             out[int(ydiff,2)] += 1
#         res[i] += out
#     bias.append(res)
#     print(max(res[1:].reshape(1008,1)) )


def sbox(sbox_idx,x):
    x = bin(x)[2:].rjust(6,'0')
    rowx = int(x[0]+x[5],2)
    colx = int(x[1]+x[2]+x[3]+x[4],2)
    return int(''.join([str(c) for c in bin(SBOX[sbox_idx][rowx][colx])[2:].rjust(4,'0')]),2)


for sbox_idx in range(8):
    print('')
    print(f"Sbox : {sbox_idx}")
    for insum in range(1,64):
        for outsum in range(1,16):
            bias = sum((bin(x&insum).count('1') - bin(sbox(sbox_idx,x)&outsum).count('1')) % 2 for x in range(64))-32
            if abs(bias) > 10:
                print('+'.join([f'x{i}' for i in range(8) if insum&(2**i)]) + ' \t\t->\t\t ' + '+'.join([f'y{i}' for i in range(8) if outsum&(2**i)]),'\t' ,bias)


# Sbox : 0
# x2                   ->    y0+y1+y2+y3      -12
# x4                   ->    y0+y1+y2+y3       18
# x0+x1+x4             ->    y0+y1+y2          12
# x0+x1+x2+x4          ->    y3                12
# x0+x2+x3+x4          ->    y2+y3             12
# x3+x5                ->    y1+y2+y3         -12
# x2+x3+x5             ->    y0+y1+y3         -12
# x0+x1+x2+x3+x5       ->    y1+y2            -12                     
# x0+x1+x3+x4+x5       ->    y3                14
# x0+x1+x2+x3+x4+x5    ->    y0                14
# x0+x1+x2+x3+x4+x5    ->    y1                12
# x0+x1+x2+x3+x4+x5    ->    y1+y3            -12

# Sbox : 1
# x4                   ->    y0+y2+y3          12
# x4                   ->    y0+y1+y2+y3       12
# x1+x4                ->    y0+y2+y3          12
# x1+x4                ->    y0+y1+y2+y3      -12
# x0+x1+x2+x3+x4       ->    y3                14
# x1+x5                ->    y0+y1+y3          16
# x1+x2+x5             ->    y2                14
# x0+x1+x2+x4+x5       ->    y2                14
# x1+x2+x3+x4+x5       ->    y1                12
# x1+x2+x3+x4+x5       ->    y0+y3             12

# Sbox : 2
# x0+x2+x3             ->    y0+y1+y2         -12
# x4                   ->    y0+y1+y3         -12
# x1+x4                ->    y0+y2+y3          14
# x0+x1+x4             ->    y0+y1+y2          12
# x1+x5                ->    y0+y1+y2+y3      -16
# x1+x2+x5             ->    y0+y1             12
# x0+x1+x3+x5          ->    y0+y3             12
# x0+x1+x2+x3+x5       ->    y3               -14
# x0+x2+x4+x5          ->    y2               -12
# x1+x2+x4+x5          ->    y1+y2             12
# x0+x1+x2+x4+x5       ->    y2                12
# x0+x1+x3+x4+x5       ->    y0                14
# x0+x1+x2+x3+x4+x5    ->    y3                12

# Sbox : 3
# x0+x1+x2             ->    y0+y2            -12
# x0+x1+x2             ->    y1+y3            -12
# x0+x1+x3+x4          ->    y0+y1             12
# x0+x1+x3+x4          ->    y2+y3             12
# x1+x5                ->    y0+y1+y2+y3       16
# x3+x5                ->    y0+y1+y2+y3       16
# x0+x1+x3+x5          ->    y1+y2            -16
# x0+x1+x3+x5          ->    y0+y3             16
# x0+x1+x2+x3+x5       ->    y0+y2             12
# x0+x1+x2+x3+x5       ->    y1+y3             12
# x0+x3+x4+x5          ->    y0+y1            -12
# x0+x3+x4+x5          ->    y2+y3            -12

# Sbox : 4
# x3                   ->    y0+y1+y3          12
# x4                   ->    y0+y1+y2+y3       20
# x1+x5                ->    y1+y2+y3          16
# x1+x5                ->    y0+y1+y2+y3       12
# x2+x5                ->    y0+y2+y3         -14
# x0+x1+x2+x5          ->    y1+y3             12
# x2+x4+x5             ->    y1                12
# x0+x1+x2+x4+x5       ->    y3               -12
# x0+x1+x2+x3+x4+x5    ->    y2               -14

# Sbox : 5
# x0+x2+x3             ->    y0+y2+y3         -12
# x4                   ->    y0+y1+y2          14
# x4                   ->    y1+y2+y3          12
# x0+x3+x4             ->    y0                12
# x1+x5                ->    y0+y1+y3         -14
# x1+x5                ->    y0+y1+y2+y3      -12
# x0+x1+x2+x5          ->    y3                12
# x3+x5                ->    y0+y2+y3          12
# x1+x4+x5             ->    y2+y3             12
# x0+x2+x3+x4+x5       ->    y3               -12
# x0+x1+x2+x3+x4+x5    ->    y1                12
# x0+x1+x2+x3+x4+x5    ->    y2                12

# Sbox : 6
# x4                   ->    y0+y1+y2+y3       14
# x1+x4                ->    y0+y1+y3          14
# x0+x1+x2+x4          ->    y3                12
# x0+x3+x4             ->    y1+y3            -12
# x0+x2+x3+x4          ->    y2+y3             12
# x1+x5                ->    y1+y2+y3          16
# x0+x1+x2+x5          ->    y0                12
# x3+x5                ->    y0+y2+y3         -14
# x2+x3+x5             ->    y0+y1+y2         -12
# x0+x1+x2+x3+x5       ->    y0               -12
# x0+x1+x3+x4+x5       ->    y2                18
# x0+x1+x3+x4+x5       ->    y3               -12
# x0+x1+x2+x3+x4+x5    ->    y0               -14

# Sbox : 7
# x2                   ->    y0+y1+y2+y3      -14
# x0+x2                ->    y0+y3            -12
# x0+x3                ->    y0+y1+y3         -12
# x0+x1+x3             ->    y0+y1            -12
# x4                   ->    y0+y1+y2+y3       16
# x0+x2+x4             ->    y2                12
# x1+x5                ->    y1+y2+y3         -16
# x0+x3+x5             ->    y1+y2+y3          12
# x2+x3+x5             ->    y0+y1+y2          14
# x4+x5                ->    y0+y2+y3          12
# x0+x2+x3+x4+x5       ->    y1               -12
