
# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_31337 = Integer(31337); _sage_const_2049 = Integer(2049)
from pubkey import P, n, e
R = GF(_sage_const_2 **_sage_const_2049 , names=('a',)); (a,) = R._first_ngens(1)

# Factoring
f = factor(n)
(p, _), (q, _) = f

# Load data
with open('flag.enc', 'rb') as f:
    enc = f.read()
c_int = Integer(enc.encode('hex'), Integer(_sage_const_16 ))
c_poly = P(R.fetch_int(c_int))

# Calculate d
PP = PolynomialRing(GF(_sage_const_2 ), names=('x',)); (x,) = PP._first_ngens(1)
PQ = PP.quo(p)
QQ = PP.quo(q)
np = PQ.order()
nq = QQ.order()
phi = (np - _sage_const_1 ) * (nq - _sage_const_1 )
d = inverse_mod(_sage_const_31337 , phi)

# Decrypt
m_poly = pow(c_poly, d, n)
m_int = R(m_poly).integer_representation()
m = format(m_int, '0256x').decode('hex')
print(repr(m))

