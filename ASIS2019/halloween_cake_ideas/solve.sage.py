
# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_373126988100715326072483107245781156204485119489 = Integer(373126988100715326072483107245781156204485119489); _sage_const_48029713913392144447486256568923103286673283937 = Integer(48029713913392144447486256568923103286673283937); _sage_const_467996041489418065436268622304855825266338280723 = Integer(467996041489418065436268622304855825266338280723); _sage_const_621803439821606291947646422656643138592770518069 = Integer(621803439821606291947646422656643138592770518069); _sage_const_883097976585278660619269873521314064958923370261 = Integer(883097976585278660619269873521314064958923370261); _sage_const_245091091146774561796627894715885724307214901148 = Integer(245091091146774561796627894715885724307214901148); _sage_const_433481663214462017150295835098295925800218140157 = Integer(433481663214462017150295835098295925800218140157)
y1 = _sage_const_467996041489418065436268622304855825266338280723 
y2 = _sage_const_373126988100715326072483107245781156204485119489 
y3 = _sage_const_245091091146774561796627894715885724307214901148 

# p : factor(2*y1**2 - (y2**2 + y3**2 ) +24) 
# 7 * 11 * 29 * 43 * 419 * 13030584875599 * 515696616124863562671639283 * 883097976585278660619269873521314064958923370261
p = _sage_const_883097976585278660619269873521314064958923370261 

# b : (y1**2 + y2**2)//2 % p
b = _sage_const_433481663214462017150295835098295925800218140157 

# a : (y1**2 -1-b) %p
a = _sage_const_48029713913392144447486256568923103286673283937 

# assert()

a = _sage_const_48029713913392144447486256568923103286673283937 
b = _sage_const_433481663214462017150295835098295925800218140157 
p = _sage_const_883097976585278660619269873521314064958923370261 

Qy = _sage_const_621803439821606291947646422656643138592770518069 
P = PolynomialRing(GF(p), names=('x',)); (x,) = P._first_ngens(1)
f = x**_sage_const_3  + a*x + b - Qy**_sage_const_2   # = 0 mod p
Qx = f.roots()[_sage_const_0 ][_sage_const_0 ]
# Qx = 708927573459527177103235542148826237228344428002

C = EllipticCurve([a,b])
C = C.change_ring(GF(p))
Q = C(Qx,Qy)

# Py = 261294536763672368671623450864670926366152852192
# P.<x> = PolynomialRing(GF(p))
# f = x^3 + a*x + b - Py^2  # = 0 mod p
# Px = f.roots()[0][0]

# 883097976585278660619270257431511085941532393885
# fs = factor(C.cardinality())
# 3 * 5 * 13 * 257 * 134021890447 * 97090721460179 * 1354215209508238123

P = inverse_mod(_sage_const_2 ,C.cardinality())*Q


assert (_sage_const_2 * P).x == Q.x
# assert bytes_to_long(flag) == P.x
assert ((-_sage_const_1 ) * Q).y == _sage_const_621803439821606291947646422656643138592770518069 

