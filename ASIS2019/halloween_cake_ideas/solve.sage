
y1 = 467996041489418065436268622304855825266338280723
y2 = 373126988100715326072483107245781156204485119489
y3 = 245091091146774561796627894715885724307214901148

# p : factor(2*y1**2 - (y2**2 + y3**2 ) +24) 
# 7 * 11 * 29 * 43 * 419 * 13030584875599 * 515696616124863562671639283 * 883097976585278660619269873521314064958923370261
p = 883097976585278660619269873521314064958923370261

# b : (y1**2 + y2**2)//2 % p
b = 433481663214462017150295835098295925800218140157

# a : (y1**2 -1-b) %p
a = 48029713913392144447486256568923103286673283937

# assert()

a = 48029713913392144447486256568923103286673283937
b = 433481663214462017150295835098295925800218140157
p = 883097976585278660619269873521314064958923370261

Qy = 621803439821606291947646422656643138592770518069
P.<x> = PolynomialRing(GF(p))
f = x^3 + a*x + b - Qy^2  # = 0 mod p
Qx = f.roots()[0][0]
# Qx = 708927573459527177103235542148826237228344428002

C = EllipticCurve([a,b])
C = C.change_ring(GF(p))
Q = C(Qx,Qy)

# Py = 261294536763672368671623450864670926366152852192
# P.<x> = PolynomialRing(GF(p))
# f = x^3 + a*x + b - Py^2  # = 0 mod p
# Px = f.roots()[0][0]

# 883097976585278660619270257431511085941532393885
# fs = factor(C.cardinality())
# 3 * 5 * 13 * 257 * 134021890447 * 97090721460179 * 1354215209508238123

P = inverse_mod(2,C.cardinality())*Q


assert (2* P).x == Q.x
# assert bytes_to_long(flag) == P.x
assert ((-1) * Q).y == 621803439821606291947646422656643138592770518069