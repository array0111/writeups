from cryptools import *
from hashlib import sha1
from Crypto.PublicKey import DSA

m = b'ls'
r = 682283365181507265188903306882920598681217914045
s = 569387005319985660621064175411422278842186651826

y = 128135682856750887590860168748824430714190353609169438003724812869569788088376999153566856518649548751808974042861313871720093923966663967385639616771013994922707548355367088446112595542221209828926608117506259743026809879227606814076195362151108590706375917914576011875357384956337974597411261584032533163073
p = 145774370140705743619288815016506936272601276321515267981294709325646228235350799641396853482542510455702593145365689674776551326526283561120782331775753481248764911686023024656237178221049671999816376444280423000085773391715885524862881877222848088840644737895543531766907185051846802894682811137086905085419
q = 739904609682520586736011252451716180456601329519
g = 52865703933600072480340150084328845769706702669400766904467248075164948743170867377627486621900744105555465052783047541675343643777082719270261354312243195450389581166294097053506337884439282134405767273312076933070573084676163659758350542617531330447790290695414443063102502247168199735083467132847036144443


def vertify(m,r,s):
    w = invmod(s,q)
    u1 = (int(sha1(m).hexdigest(),16) * w ) % q
    u2 = r * w % q
    v  = ( (pow(g,u1,p) * pow(y,u2,p)) % p ) % q
    assert v == r
    return v == r

vertify(m,r,s)




